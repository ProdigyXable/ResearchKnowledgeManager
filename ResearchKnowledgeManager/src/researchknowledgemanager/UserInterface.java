/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package researchknowledgemanager;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.SwingUtilities;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author Xable Enterprises
 */
public class UserInterface extends javax.swing.JFrame {

    boolean exitNoWrite = false;

    ResearchKnowledgeManager rm;
    DefaultListModel statusMessages = new DefaultListModel();
    DefaultListModel TagItemListModel = new DefaultListModel();
    Thread executingThread;

    /**
     * Creates new form UserInterface
     */
    public UserInterface(ResearchKnowledgeManager rm) {
        this.rm = rm;
        initComponents();
        handleState();

        this.customActionPane.removeAll();
        this.validate();
    }

    void handleState() {
        switch (rm.actionStatus) {
            case READY: {
                startButton.setEnabled(true);
                cancelButton.setEnabled(true);
                resumeButton.setEnabled(false);
                pauseButton.setEnabled(false);
                break;
            }

            case INACTIVE: {
                startButton.setEnabled(false);
                cancelButton.setEnabled(false);
                resumeButton.setEnabled(false);
                pauseButton.setEnabled(false);
                break;
            }

            case ACTIVE: {
                startButton.setEnabled(false);
                cancelButton.setEnabled(true);
                resumeButton.setEnabled(false);
                pauseButton.setEnabled(true);
                break;
            }

            case PAUSED: {
                startButton.setEnabled(false);
                cancelButton.setEnabled(true);
                resumeButton.setEnabled(true);
                pauseButton.setEnabled(false);
                break;
            }

        }
    }

    void updateTagTree() {
        this.TagTree.setModel(new TagModelTree(this.rm.Tags));
        this.TagTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
    }

    void updateFileTree() {
        this.FileTree.setModel(new FileModelTree(this.rm.Files));
        this.FileTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
    }

    void statusMessagesBottom() {
        statusList.ensureIndexIsVisible(statusList.getModel().getSize() - 1);
    }

    private void addMessage(String message) {
        statusMessages.addElement(" " + message);

    }

    private void TagItemMessage(String message) {
        TagItemListModel.addElement(message);

    }

    public void newMessage(String message) {

        SwingUtilities.invokeLater(() -> {
            addMessage(message);
        });

        // Scrolls to the bottom of the Jlist
        SwingUtilities.invokeLater(() -> {
            statusMessagesBottom();
        });
    }

    public void newTagItem(String message) {
        SwingUtilities.invokeLater(() -> {
            TagItemMessage(message);
        });
    }

    public void refreshTagItemList() {
        this.TagItemListModel.removeAllElements();

        // List should already be ensured to no have duplicates
        for (int i = 0; i < rm.Tags.size(); i++) {
            this.TagItemListModel.addElement(this.rm.Tags.get(i));
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        modifyKeywordsButton = new javax.swing.JButton();
        removeTagFromFileButton = new javax.swing.JButton();
        removeFileFromTagButton = new javax.swing.JButton();
        addTagToFileButton = new javax.swing.JButton();
        addFileToSystemButton = new javax.swing.JButton();
        addFileToTagButton = new javax.swing.JButton();
        newTagButton = new javax.swing.JButton();
        SearchResultsPopupMenu = new javax.swing.JPopupMenu();
        OpenFillePopupMenuItem = new javax.swing.JMenuItem();
        RootFolderPopupMenuItem = new javax.swing.JMenuItem();
        TagFilePopupMenuItem = new javax.swing.JMenuItem();
        TabbedPane = new javax.swing.JTabbedPane();
        FileExplorerTreePane = new javax.swing.JScrollPane();
        FileExplorerTree = new javax.swing.JTree();
        TagTreePane = new javax.swing.JScrollPane();
        TagTree = new javax.swing.JTree();
        FileTreePane = new javax.swing.JScrollPane();
        FileTree = new javax.swing.JTree();
        statusMessageScrollPane = new javax.swing.JScrollPane();
        statusList = new javax.swing.JList();
        PrimaryActionPanel = new javax.swing.JPanel();
        startButton = new javax.swing.JButton();
        resumeButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel();
        customActionPane = new javax.swing.JPanel();
        TagListItemScrollPane = new javax.swing.JScrollPane();
        TagItemSearchList = new javax.swing.JList();
        SearchKeywordScrollPane = new javax.swing.JScrollPane();
        SearchKeyWordsTextArea = new javax.swing.JTextArea();
        StartSearchButton = new javax.swing.JButton();
        SearchResultsListScrollPane = new javax.swing.JScrollPane();
        searchResultsList = new javax.swing.JList();
        progressBar = new javax.swing.JProgressBar();
        MenuBar = new javax.swing.JMenuBar();
        SystemMenu = new javax.swing.JMenu();
        changeRepositoryFolderMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        openHelpDocumentMenuIte0 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        cleanDataFilesMenuItem = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        safelyExitSystem = new javax.swing.JMenuItem();
        TagsMenu = new javax.swing.JMenu();
        automaticallyTagFilesMenuItem = new javax.swing.JMenuItem();
        SearchesMenu = new javax.swing.JMenu();
        initiateSearchQueryMenuItem = new javax.swing.JMenuItem();
        IndexingMenu = new javax.swing.JMenu();
        indexAllFilesMenuItem = new javax.swing.JMenuItem();
        indexNewFilesMenuItem = new javax.swing.JMenuItem();

        modifyKeywordsButton.setFont(new java.awt.Font("Verdana", 1, 10)); // NOI18N
        modifyKeywordsButton.setText("Modify Tag Keywords");
        modifyKeywordsButton.setActionCommand("");
        modifyKeywordsButton.setAlignmentX(0.5F);
        modifyKeywordsButton.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        removeTagFromFileButton.setFont(new java.awt.Font("Verdana", 1, 10)); // NOI18N
        removeTagFromFileButton.setText("Remove Tag(s) from File");
        removeTagFromFileButton.setActionCommand("");
        removeTagFromFileButton.setAlignmentX(0.5F);
        removeTagFromFileButton.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        removeFileFromTagButton.setFont(new java.awt.Font("Verdana", 1, 10)); // NOI18N
        removeFileFromTagButton.setText("Remove File(s) from Tag");
        removeFileFromTagButton.setActionCommand("");
        removeFileFromTagButton.setAlignmentX(0.5F);
        removeFileFromTagButton.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        removeFileFromTagButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFileFromTagButtonActionPerformed(evt);
            }
        });

        addTagToFileButton.setFont(new java.awt.Font("Verdana", 1, 10)); // NOI18N
        addTagToFileButton.setText("Add Tag(s) to File");
        addTagToFileButton.setActionCommand("");
        addTagToFileButton.setAlignmentX(0.5F);
        addTagToFileButton.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        addTagToFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTagToFileButtonActionPerformed(evt);
            }
        });

        addFileToSystemButton.setFont(new java.awt.Font("Verdana", 1, 10)); // NOI18N
        addFileToSystemButton.setText("Add File(s) to System");
        addFileToSystemButton.setActionCommand("");
        addFileToSystemButton.setAlignmentX(0.5F);
        addFileToSystemButton.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        addFileToTagButton.setFont(new java.awt.Font("Verdana", 1, 10)); // NOI18N
        addFileToTagButton.setText("Add File(s) to Tag");
        addFileToTagButton.setActionCommand("");
        addFileToTagButton.setAlignmentX(0.5F);
        addFileToTagButton.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        addFileToTagButton.setMargin(new java.awt.Insets(2, 6, 2, 6));
        addFileToTagButton.getAccessibleContext().setAccessibleDescription("");

        newTagButton.setFont(new java.awt.Font("Verdana", 1, 10)); // NOI18N
        newTagButton.setText("Create New Tag");
        newTagButton.setActionCommand("");
        newTagButton.setAlignmentX(0.5F);
        newTagButton.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        newTagButton.setMargin(new java.awt.Insets(2, 6, 2, 6));
        newTagButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newTagButtonActionPerformed(evt);
            }
        });
        newTagButton.getAccessibleContext().setAccessibleDescription("");

        SearchResultsPopupMenu.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N

        OpenFillePopupMenuItem.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        OpenFillePopupMenuItem.setText("Open/Launch File");
        SearchResultsPopupMenu.add(OpenFillePopupMenuItem);

        RootFolderPopupMenuItem.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        RootFolderPopupMenuItem.setText("Open File's Parent Folder");
        SearchResultsPopupMenu.add(RootFolderPopupMenuItem);

        TagFilePopupMenuItem.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        TagFilePopupMenuItem.setText("Tag File");
        SearchResultsPopupMenu.add(TagFilePopupMenuItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Research Knowledge Manager - SE Senior Design UTD Fall 2015");
        setBackground(new java.awt.Color(153, 153, 153));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMaximumSize(new java.awt.Dimension(1280, 700));
        setMinimumSize(new java.awt.Dimension(1280, 700));
        setPreferredSize(new java.awt.Dimension(1280, 700));
        setResizable(false);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        TabbedPane.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        TabbedPane.setInheritsPopupMenu(true);
        TabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TabbedPaneStateChanged(evt);
            }
        });

        FileExplorerTree.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        FileExplorerTree.setModel(new FileTreeModelTree(this.rm.repositoryFolder));
        FileExplorerTree.setVisibleRowCount(40);
        FileExplorerTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                FileExplorerTreeValueChanged(evt);
            }
        });
        FileExplorerTreePane.setViewportView(FileExplorerTree);

        TabbedPane.addTab("File Explorer Hierarchy", FileExplorerTreePane);

        TagTree.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        TagTree.setModel(new TagModelTree(this.rm.Tags));
        TagTree.setLargeModel(true);
        TagTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                TagTreeValueChanged(evt);
            }
        });
        TagTreePane.setViewportView(TagTree);

        TabbedPane.addTab("Tag Hierarchy", TagTreePane);

        FileTree.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        FileTree.setModel(new FileModelTree(this.rm.Files));
        FileTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                FileTreeValueChanged(evt);
            }
        });
        FileTreePane.setViewportView(FileTree);

        TabbedPane.addTab("File Hierarchy", FileTreePane);

        statusMessageScrollPane.setBackground(new java.awt.Color(204, 204, 204));
        statusMessageScrollPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        statusMessageScrollPane.setAutoscrolls(true);

        statusList.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        statusList.setFont(new java.awt.Font("Verdana", 2, 10)); // NOI18N
        statusList.setModel(this.statusMessages);
        statusList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        statusList.setDropMode(javax.swing.DropMode.ON);
        statusList.setName("statusList"); // NOI18N
        statusList.setValueIsAdjusting(true);
        statusList.setVisibleRowCount(1);
        statusList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                statusListKeyPressed(evt);
            }
        });
        statusMessageScrollPane.setViewportView(statusList);
        statusList.getAccessibleContext().setAccessibleName("statusList");

        PrimaryActionPanel.setBackground(new java.awt.Color(204, 204, 204));
        PrimaryActionPanel.setLayout(new java.awt.GridLayout(1, 0, 2, 0));

        startButton.setFont(new java.awt.Font("Verdana", 1, 10)); // NOI18N
        startButton.setText("Start Action");
        startButton.setActionCommand("");
        startButton.setAlignmentX(0.5F);
        startButton.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        startButton.setMargin(new java.awt.Insets(2, 6, 2, 6));
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });
        PrimaryActionPanel.add(startButton);
        startButton.getAccessibleContext().setAccessibleDescription("");

        resumeButton.setFont(new java.awt.Font("Verdana", 1, 10)); // NOI18N
        resumeButton.setText("Resume Action");
        resumeButton.setActionCommand("");
        resumeButton.setAlignmentX(0.5F);
        resumeButton.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        resumeButton.setMargin(new java.awt.Insets(2, 6, 2, 6));
        resumeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resumeButtonActionPerformed(evt);
            }
        });
        PrimaryActionPanel.add(resumeButton);
        resumeButton.getAccessibleContext().setAccessibleDescription("");

        pauseButton.setFont(new java.awt.Font("Verdana", 1, 10)); // NOI18N
        pauseButton.setText("Pause Action");
        pauseButton.setActionCommand("");
        pauseButton.setAlignmentX(0.5F);
        pauseButton.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pauseButton.setMargin(new java.awt.Insets(2, 6, 2, 6));
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });
        PrimaryActionPanel.add(pauseButton);
        pauseButton.getAccessibleContext().setAccessibleDescription("");

        cancelButton.setFont(new java.awt.Font("Verdana", 1, 10)); // NOI18N
        cancelButton.setText("Cancel Action");
        cancelButton.setActionCommand("");
        cancelButton.setAlignmentX(0.5F);
        cancelButton.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        cancelButton.setMargin(new java.awt.Insets(2, 6, 2, 6));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        PrimaryActionPanel.add(cancelButton);
        cancelButton.getAccessibleContext().setAccessibleDescription("");

        mainPanel.setBackground(new java.awt.Color(229, 229, 229));
        mainPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED)));

        customActionPane.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        customActionPane.setMinimumSize(new java.awt.Dimension(817, 28));
        customActionPane.setLayout(new java.awt.GridLayout(0, 3, 2, 2));

        TagListItemScrollPane.setBorder(SearchKeywordScrollPane.getBorder());
        TagListItemScrollPane.setViewportBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Tag Query Terms", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Verdana", 0, 10)), javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4))); // NOI18N

        TagItemSearchList.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        TagItemSearchList.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        TagItemSearchList.setModel(this.TagItemListModel);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, mainPanel, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), TagItemSearchList, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        TagListItemScrollPane.setViewportView(TagItemSearchList);

        SearchKeywordScrollPane.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4)));
        SearchKeywordScrollPane.setViewportBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Keyword Query Terms", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Verdana", 0, 10)), javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4))); // NOI18N

        SearchKeyWordsTextArea.setColumns(25);
        SearchKeyWordsTextArea.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        SearchKeyWordsTextArea.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, java.awt.Color.white, null));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, mainPanel, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), SearchKeyWordsTextArea, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        SearchKeywordScrollPane.setViewportView(SearchKeyWordsTextArea);

        StartSearchButton.setText("Perform Search");
        StartSearchButton.setActionCommand("");
        StartSearchButton.setAlignmentX(0.5F);
        StartSearchButton.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, mainPanel, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), StartSearchButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        StartSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartSearchButtonActionPerformed(evt);
            }
        });

        SearchResultsListScrollPane.setBorder(SearchKeywordScrollPane.getBorder());
        SearchResultsListScrollPane.setViewportBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Search Results", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Verdana", 0, 10)), javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4))); // NOI18N

        searchResultsList.setBorder(TagItemSearchList.getBorder());
        searchResultsList.setFont(new java.awt.Font("Verdana", 2, 10)); // NOI18N
        searchResultsList.setModel(new DefaultListModel());
        searchResultsList.setComponentPopupMenu(SearchResultsPopupMenu);
        searchResultsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                searchResultsListValueChanged(evt);
            }
        });
        SearchResultsListScrollPane.setViewportView(searchResultsList);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(customActionPane, javax.swing.GroupLayout.PREFERRED_SIZE, 736, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(TagListItemScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(StartSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SearchKeywordScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(SearchResultsListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 712, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SearchResultsListScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(SearchKeywordScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(StartSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(TagListItemScrollPane))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(customActionPane, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        progressBar.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        progressBar.setMaximum(0);
        progressBar.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        progressBar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        progressBar.setName(""); // NOI18N
        progressBar.setOpaque(false);
        progressBar.setString("");
        progressBar.setStringPainted(true);
        progressBar.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                progressBarStateChanged(evt);
            }
        });

        SystemMenu.setText("System");
        SystemMenu.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        SystemMenu.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
                SystemMenuMenuCanceled(evt);
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
            }
        });

        changeRepositoryFolderMenuItem.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        changeRepositoryFolderMenuItem.setText("Change Repository Folder");
        changeRepositoryFolderMenuItem.setActionCommand("askForFolder");
        changeRepositoryFolderMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeRepositoryFolderMenuItemActionPerformed(evt);
            }
        });
        SystemMenu.add(changeRepositoryFolderMenuItem);
        SystemMenu.add(jSeparator1);

        openHelpDocumentMenuIte0.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        openHelpDocumentMenuIte0.setText("Open Help Document");
        SystemMenu.add(openHelpDocumentMenuIte0);
        SystemMenu.add(jSeparator2);

        cleanDataFilesMenuItem.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        cleanDataFilesMenuItem.setText("Clean Data Files");
        cleanDataFilesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleanDataFilesMenuItemActionPerformed(evt);
            }
        });
        SystemMenu.add(cleanDataFilesMenuItem);
        progressBar.setString("0%");

        SystemMenu.add(jSeparator5);

        safelyExitSystem.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        safelyExitSystem.setText("Safely Exit System");
        safelyExitSystem.setActionCommand("Exit");
        safelyExitSystem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                safelyExitSystemActionPerformed(evt);
            }
        });
        SystemMenu.add(safelyExitSystem);

        MenuBar.add(SystemMenu);

        TagsMenu.setText("Tags");
        TagsMenu.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        automaticallyTagFilesMenuItem.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        automaticallyTagFilesMenuItem.setText("Automatically Tag Files");
        TagsMenu.add(automaticallyTagFilesMenuItem);

        MenuBar.add(TagsMenu);

        SearchesMenu.setText("Searches");
        SearchesMenu.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        initiateSearchQueryMenuItem.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        initiateSearchQueryMenuItem.setText("Initiate Search Query");
        initiateSearchQueryMenuItem.setActionCommand("initiateSearchQuery");
        SearchesMenu.add(initiateSearchQueryMenuItem);

        MenuBar.add(SearchesMenu);

        IndexingMenu.setText("Indexing");
        IndexingMenu.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        indexAllFilesMenuItem.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        indexAllFilesMenuItem.setText("Index All Files");
        indexAllFilesMenuItem.setActionCommand("IndexAll");
        indexAllFilesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                indexAllFilesMenuItemActionPerformed(evt);
            }
        });
        IndexingMenu.add(indexAllFilesMenuItem);

        indexNewFilesMenuItem.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        indexNewFilesMenuItem.setText("Index New Files");
        indexNewFilesMenuItem.setActionCommand("IndexNew");
        indexNewFilesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                indexNewFilesMenuItemActionPerformed(evt);
            }
        });
        IndexingMenu.add(indexNewFilesMenuItem);

        MenuBar.add(IndexingMenu);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(statusMessageScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 660, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PrimaryActionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(TabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(TabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                        .addComponent(statusMessageScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(PrimaryActionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        getAccessibleContext().setAccessibleName("Research Knowledge Manager - SE Senior Design");

        bindingGroup.bind();

        setSize(new java.awt.Dimension(1283, 700));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void SystemMenuMenuCanceled(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_SystemMenuMenuCanceled
        // TODO add your handling code here:
    }//GEN-LAST:event_SystemMenuMenuCanceled

    private void changeRepositoryFolderMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeRepositoryFolderMenuItemActionPerformed
        try {
            rm.askForRepository(new File(rm.dataDirectory.getAbsoluteFile() + "\\" + rm.repoFileName));
        } catch (IOException ex) {
            System.err.println("I/O Error!");
        }
    }//GEN-LAST:event_changeRepositoryFolderMenuItemActionPerformed

    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
        if (executingThread != null) {

            synchronized (executingThread) {
                if (rm.actionStatus == ResearchKnowledgeManager.activeState.ACTIVE) {
                    rm.setState(ResearchKnowledgeManager.activeState.PAUSED);
                    newMessage("Pausing current action. Click \"Resume Action\" to resume the action");
                }
            }
        }
    }//GEN-LAST:event_pauseButtonActionPerformed

    private void cleanDataFilesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanDataFilesMenuItemActionPerformed
        // TODO add your handling code here:
        exitNoWrite = true;

        ConfirmationDialog confirm = new ConfirmationDialog(this, true);
        confirm.setVisible(true);
        if (confirm.getReturnStatus() == 1) {
            this.rm.clean();
            progressBar.setMaximum(0);

            // Series of actions disabling menu items to prevent unexpected exceptions from user input
            // These enable actions only matter if the application DOES NOT exit
            this.indexAllFilesMenuItem.setEnabled(false);
            this.indexNewFilesMenuItem.setEnabled(false);
            this.changeRepositoryFolderMenuItem.setEnabled(false);
            this.automaticallyTagFilesMenuItem.setEnabled(false);
            this.initiateSearchQueryMenuItem.setEnabled(false);

            this.formWindowClosing(null);
        }

    }//GEN-LAST:event_cleanDataFilesMenuItemActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        if (!exitNoWrite) {
            this.rm.exit();
        }
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    private void safelyExitSystemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_safelyExitSystemActionPerformed
        this.formWindowClosing(null);
    }//GEN-LAST:event_safelyExitSystemActionPerformed

    private void resumeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resumeButtonActionPerformed

        if (executingThread != null) {
            synchronized (executingThread) {
                if (rm.actionStatus == ResearchKnowledgeManager.activeState.PAUSED) {
                    executingThread.notifyAll();
                    rm.setState(ResearchKnowledgeManager.activeState.ACTIVE);
                    newMessage("Resuming current action...");
                }
            }
        }
    }//GEN-LAST:event_resumeButtonActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        if (executingThread != null && !executingThread.isAlive()) {
            executingThread.start();
        } else {
            System.err.println("NULL EXCEPTION ERROR OCCURRING");
        }
    }//GEN-LAST:event_startButtonActionPerformed

    private void TagTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_TagTreeValueChanged
        // Current selection is on a node (tag name)
        if (((TagModelTree) TagTree.getModel()).isHead(TagTree.getLastSelectedPathComponent())) {
            this.removeFileFromTagButton.setEnabled(false);
            this.addFileToTagButton.setEnabled(false);
            this.modifyKeywordsButton.setEnabled(false);
            this.newTagButton.setEnabled(true);
        } // Selection is on a leaf
        else if (TagTree.getModel().isLeaf(TagTree.getLastSelectedPathComponent())) {

            this.removeFileFromTagButton.setEnabled(true);
            this.addFileToTagButton.setEnabled(false);
            this.modifyKeywordsButton.setEnabled(false);
            this.newTagButton.setEnabled(true);

        } else {
            this.removeFileFromTagButton.setEnabled(false);
            this.addFileToTagButton.setEnabled(true);
            this.modifyKeywordsButton.setEnabled(true);
            this.newTagButton.setEnabled(true);
        }
    }//GEN-LAST:event_TagTreeValueChanged

    private void progressBarStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_progressBarStateChanged
        if (rm.ui.progressBar.getMaximum() > 0) {
            rm.ui.progressBar.setString(100 * rm.ui.progressBar.getValue() / rm.ui.progressBar.getMaximum() + "%");
        } else {
            rm.ui.progressBar.setString("0%");
        }

    }//GEN-LAST:event_progressBarStateChanged

    private void indexAllFilesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_indexAllFilesMenuItemActionPerformed
        rm.setState(ResearchKnowledgeManager.activeState.READY);
        newMessage("Ready to index all files. Click \"Start Action\" to begin");

        this.executingThread = new Thread(() -> {

            //Thread initializations
            progressBar.setMaximum(0);
            rm.setState(ResearchKnowledgeManager.activeState.ACTIVE);
            newMessage("Preparing some calculations, please wait");
            progressBar.setMaximum(rm.fileIndexer.computeMaxFolderChild(rm.repositoryFolder));

            newMessage("Calculations completed! File indexing will now begin. Please wait for confirmation message...");
            rm.fileIndexer.indexAllReturn = rm.fileIndexer.indexFilesAll(rm.repositoryFolder, false, rm);

            newMessage(rm.lineSeparator);
            rm.fileIndexer.saveIndexAll(rm.dataDirectory);

            // Thread cleanup
            this.updateFileTree();
            this.updateTagTree();
            newMessage("Finished processing all files!");
            rm.setState(ResearchKnowledgeManager.activeState.INACTIVE);
            rm.updateLastModified();
            executingThread = null;
        });

    }//GEN-LAST:event_indexAllFilesMenuItemActionPerformed

    private void indexNewFilesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_indexNewFilesMenuItemActionPerformed
        rm.setState(ResearchKnowledgeManager.activeState.READY);
        newMessage("Ready to index all files. Click \"Start Action\" to begin");

        executingThread = new Thread(() -> {

            //Thread initializations
            progressBar.setMaximum(0);
            rm.setState(ResearchKnowledgeManager.activeState.ACTIVE);
            newMessage("Preparing some calculations, please wait...");
            progressBar.setMaximum(rm.fileIndexer.computeMaxFolderChild(rm.repositoryFolder));
            newMessage("Calculations completed! File indexing will now begin. Please wait for confirmation message...");

            rm.fileIndexer.indexNewReturn = rm.fileIndexer.indexFilesNew(rm.repositoryFolder, false, rm);
            newMessage(rm.lineSeparator);

            rm.fileIndexer.saveIndexNew(rm.dataDirectory);

            // Thread cleanup
            this.updateFileTree();
            this.updateTagTree();
            newMessage("Finished processing new files!");
            rm.setState(ResearchKnowledgeManager.activeState.INACTIVE);
            rm.updateLastModified();
            executingThread = null;
        });

    }//GEN-LAST:event_indexNewFilesMenuItemActionPerformed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus

    }//GEN-LAST:event_formWindowGainedFocus

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed

        newMessage("Current action cancelled!");
        newMessage(rm.lineSeparator);
        progressBar.setString("0%");
        progressBar.setValue(0);
        progressBar.setMaximum(0);

        switch (rm.actionStatus) {
            case READY: {
                // May need to find better alternative to stop() method since the method is deprecated...
                executingThread.stop();
                executingThread = null;
                rm.setState(ResearchKnowledgeManager.activeState.INACTIVE);
                break;
            }
            case ACTIVE: {
                // May need to find better alternative to stop() method since the method is deprecated...
                executingThread.stop();
                executingThread = null;
                rm.setState(ResearchKnowledgeManager.activeState.INACTIVE);
                break;
            }
            case PAUSED: {
                // May need to find better alternative to stop() method since the method is deprecated...
                executingThread.stop();
                executingThread = null;
                rm.setState(ResearchKnowledgeManager.activeState.INACTIVE);
                break;
            }

        }
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void statusListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_statusListKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_DELETE) {
            statusMessages.removeAllElements();
            newMessage("Message log cleared!");
            newMessage(rm.lineSeparator);
        } else if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_BACK_SPACE && statusMessages.getSize() > 0) {
            statusMessages.remove(statusMessages.getSize() - 1);
        }
    }//GEN-LAST:event_statusListKeyPressed

    private void FileExplorerTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_FileExplorerTreeValueChanged

    }//GEN-LAST:event_FileExplorerTreeValueChanged

    private void newTagButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newTagButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newTagButtonActionPerformed

    private void removeFileFromTagButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFileFromTagButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_removeFileFromTagButtonActionPerformed

    private void addTagToFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTagToFileButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addTagToFileButtonActionPerformed

    private void TabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_TabbedPaneStateChanged
        this.customActionPane.removeAll();

        if (TabbedPane.getSelectedComponent() == this.TagTreePane) {

            this.customActionPane.add(this.newTagButton);
            this.customActionPane.add(this.addFileToTagButton);
            this.customActionPane.add(this.modifyKeywordsButton);
            this.customActionPane.add(this.removeFileFromTagButton);

            // Sets the default state of the buttons to false
            this.removeFileFromTagButton.setEnabled(false);
            this.addFileToTagButton.setEnabled(false);
            this.modifyKeywordsButton.setEnabled(false);
            this.newTagButton.setEnabled(false);

        } else if (TabbedPane.getSelectedComponent() == this.FileTreePane) {
            this.customActionPane.add(this.addFileToSystemButton);
            this.customActionPane.add(this.addTagToFileButton);
            this.customActionPane.add(this.removeTagFromFileButton);

            // Sets the default state of the buttons to false
            this.removeTagFromFileButton.setEnabled(false);
            this.addFileToSystemButton.setEnabled(false);
            this.addTagToFileButton.setEnabled(false);

        } else if (TabbedPane.getSelectedComponent() == this.FileExplorerTreePane) {

        }

        this.repaint();
    }//GEN-LAST:event_TabbedPaneStateChanged

    private void FileTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_FileTreeValueChanged

        // Current selection is on a node (tag name)
        if (((FileModelTree) FileTree.getModel()).isHead(FileTree.getLastSelectedPathComponent())) {
            this.removeTagFromFileButton.setEnabled(false);
            this.addFileToSystemButton.setEnabled(true);
            this.addTagToFileButton.setEnabled(false);
        } // Selection is on a leaf
        else if (FileTree.getModel().isLeaf(FileTree.getLastSelectedPathComponent())) {

            this.removeTagFromFileButton.setEnabled(true);
            this.addFileToSystemButton.setEnabled(true);
            this.addTagToFileButton.setEnabled(false);

        } else {
            this.removeTagFromFileButton.setEnabled(false);
            this.addFileToSystemButton.setEnabled(true);
            this.addTagToFileButton.setEnabled(true);
        }
    }//GEN-LAST:event_FileTreeValueChanged

    private void StartSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartSearchButtonActionPerformed
        if (!this.SearchKeyWordsTextArea.getText().trim().equals("")) {
            throw new RuntimeException("Searching with keywords is currently not implemented...");
        }

        List<TagClass> selectedTags = this.TagItemSearchList.getSelectedValuesList();

        if (selectedTags.isEmpty()) {
            newMessage("Search cannot be completed! No tag terms were selected.");
            newMessage(rm.lineSeparator);
        } else {
            newMessage("Performing Tag-based Search...");
            newMessage(rm.lineSeparator);

            Vector<FileClass> tagResults = rm.findTagsComplete(selectedTags);

            if (this.SearchKeyWordsTextArea.getText().trim().equals("")) {
                // rm.parseKeyWords(tagResults);
                // searchKeyWords();
            }

            DefaultListModel buffer = new DefaultListModel();

            for (int i = 0; i < tagResults.size(); i++) {
                buffer.addElement(tagResults.get(i));
            }

            this.searchResultsList.setModel(buffer);

        }

    }//GEN-LAST:event_StartSearchButtonActionPerformed

    private void searchResultsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_searchResultsListValueChanged

    }//GEN-LAST:event_searchResultsListValueChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JTree FileExplorerTree;
    private javax.swing.JScrollPane FileExplorerTreePane;
    private javax.swing.JTree FileTree;
    private javax.swing.JScrollPane FileTreePane;
    private javax.swing.JMenu IndexingMenu;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JMenuItem OpenFillePopupMenuItem;
    private javax.swing.JPanel PrimaryActionPanel;
    private javax.swing.JMenuItem RootFolderPopupMenuItem;
    private javax.swing.JTextArea SearchKeyWordsTextArea;
    private javax.swing.JScrollPane SearchKeywordScrollPane;
    private javax.swing.JScrollPane SearchResultsListScrollPane;
    private javax.swing.JPopupMenu SearchResultsPopupMenu;
    private javax.swing.JMenu SearchesMenu;
    private javax.swing.JButton StartSearchButton;
    private javax.swing.JMenu SystemMenu;
    private javax.swing.JTabbedPane TabbedPane;
    private javax.swing.JMenuItem TagFilePopupMenuItem;
    private javax.swing.JList TagItemSearchList;
    private javax.swing.JScrollPane TagListItemScrollPane;
    private javax.swing.JTree TagTree;
    private javax.swing.JScrollPane TagTreePane;
    private javax.swing.JMenu TagsMenu;
    private javax.swing.JButton addFileToSystemButton;
    private javax.swing.JButton addFileToTagButton;
    private javax.swing.JButton addTagToFileButton;
    private javax.swing.JMenuItem automaticallyTagFilesMenuItem;
    private javax.swing.JButton cancelButton;
    private javax.swing.JMenuItem changeRepositoryFolderMenuItem;
    private javax.swing.JMenuItem cleanDataFilesMenuItem;
    private javax.swing.JPanel customActionPane;
    private javax.swing.JMenuItem indexAllFilesMenuItem;
    private javax.swing.JMenuItem indexNewFilesMenuItem;
    private javax.swing.JMenuItem initiateSearchQueryMenuItem;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton modifyKeywordsButton;
    private javax.swing.JButton newTagButton;
    private javax.swing.JMenuItem openHelpDocumentMenuIte0;
    private javax.swing.JButton pauseButton;
    protected javax.swing.JProgressBar progressBar;
    private javax.swing.JButton removeFileFromTagButton;
    private javax.swing.JButton removeTagFromFileButton;
    private javax.swing.JButton resumeButton;
    private javax.swing.JMenuItem safelyExitSystem;
    private javax.swing.JList searchResultsList;
    private javax.swing.JButton startButton;
    private javax.swing.JList statusList;
    private javax.swing.JScrollPane statusMessageScrollPane;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

}
