/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package researchknowledgemanager;

import java.io.File;
import java.io.IOException;
import javax.swing.DefaultListModel;
import javax.swing.SwingUtilities;

/**
 *
 * @author Xable Enterprises
 */
public class UserInterface extends javax.swing.JFrame {

    boolean exitNoWrite = false;

    ResearchKnowledgeManager rm;
    DefaultListModel statusMessages = new DefaultListModel();
    Thread executingThread;

    /**
     * Creates new form UserInterface
     */
    public UserInterface(ResearchKnowledgeManager rm) {
        this.rm = rm;
        initComponents();
        handleState();
    }

    void handleState() {
        switch (rm.actionStatus) {
            case READY: {
                startButton.setEnabled(true);
                cancelButton.setEnabled(true);
                resumeButton.setEnabled(false);
                pauseButton.setEnabled(false);
                break;
            }

            case INACTIVE: {
                startButton.setEnabled(false);
                cancelButton.setEnabled(false);
                resumeButton.setEnabled(false);
                pauseButton.setEnabled(false);
                break;
            }

            case ACTIVE: {
                startButton.setEnabled(false);
                cancelButton.setEnabled(true);
                resumeButton.setEnabled(false);
                pauseButton.setEnabled(true);
                break;
            }

            case PAUSED: {
                startButton.setEnabled(false);
                cancelButton.setEnabled(true);
                resumeButton.setEnabled(true);
                pauseButton.setEnabled(false);
                break;
            }

        }
    }

    void updateTagTree() {
        this.TagTree.setModel(new TagModelTree(this.rm.Tags));
    }

    void updateFileTree() {
        this.FileTree.setModel(new FileModelTree(this.rm.Files));
    }

    void statusMessagesBottom() {
        statusList.ensureIndexIsVisible(statusList.getModel().getSize() - 1);
    }

    private void addMessage(String message) {
        statusMessages.addElement(" " + message);

    }

    public void newMessage(String message) {

        SwingUtilities.invokeLater(() -> {
            addMessage(message);
        });

        // Scrolls to the bottom of the Jlist
        SwingUtilities.invokeLater(() -> {
            statusMessagesBottom();
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        statusMessageScrollPane = new javax.swing.JScrollPane();
        statusList = new javax.swing.JList();
        TabbedPane = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        FileExplorerTree = new javax.swing.JTree();
        jScrollPane3 = new javax.swing.JScrollPane();
        TagTree = new javax.swing.JTree();
        jScrollPane4 = new javax.swing.JScrollPane();
        FileTree = new javax.swing.JTree();
        UserActionPanel = new javax.swing.JPanel();
        startButton = new javax.swing.JButton();
        resumeButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        SubmitButton = new javax.swing.JButton();
        QuitButton = new javax.swing.JButton();
        MainPanel = new javax.swing.JPanel();
        ProgressBar = new javax.swing.JProgressBar();
        MenuBar = new javax.swing.JMenuBar();
        SystemMenu = new javax.swing.JMenu();
        changeRepositoryFolderMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        openHelpDocumentMenuIte0 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        cleanDataFilesMenuItem = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        safelyExitSystem = new javax.swing.JMenuItem();
        TagsMenu = new javax.swing.JMenu();
        automaticallyTagFilesMenuItem = new javax.swing.JMenuItem();
        manuallyTagFilesMenuItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        associateFilesWithTagMenuItem = new javax.swing.JMenuItem();
        associateTagsWithFilesMenuItem = new javax.swing.JMenuItem();
        SearchesMenu = new javax.swing.JMenu();
        initiateSearchQueryMenuItem = new javax.swing.JMenuItem();
        IndexingMenu = new javax.swing.JMenu();
        indexAllFilesMenuItem = new javax.swing.JMenuItem();
        indexNewFilesMenuItem = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        addSpecificFilesToSystemMenuItem = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Research Knowledge Manager - SE Senior Design UTD Fall 2015");
        setBackground(new java.awt.Color(153, 153, 153));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMaximumSize(new java.awt.Dimension(1280, 700));
        setMinimumSize(new java.awt.Dimension(1280, 700));
        setPreferredSize(new java.awt.Dimension(1280, 700));
        setResizable(false);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        statusMessageScrollPane.setBackground(new java.awt.Color(204, 204, 204));
        statusMessageScrollPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        statusMessageScrollPane.setAutoscrolls(true);

        statusList.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        statusList.setModel(this.statusMessages);
        statusList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        statusList.setDropMode(javax.swing.DropMode.ON);
        statusList.setName("statusList"); // NOI18N
        statusList.setValueIsAdjusting(true);
        statusList.setVisibleRowCount(1);
        statusList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                statusListKeyPressed(evt);
            }
        });
        statusMessageScrollPane.setViewportView(statusList);
        statusList.getAccessibleContext().setAccessibleName("statusList");

        FileExplorerTree.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        FileExplorerTree.setModel(new FileTreeModelTree(this.rm.repositoryFolder));
        jScrollPane1.setViewportView(FileExplorerTree);

        TabbedPane.addTab("File Explorer Hierarchy", jScrollPane1);

        TagTree.setModel(new TagModelTree(this.rm.Tags));
        TagTree.setLargeModel(true);
        TagTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                TagTreeValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(TagTree);

        TabbedPane.addTab("List Of Tags", jScrollPane3);

        FileTree.setModel(new FileModelTree(this.rm.Files));
        jScrollPane4.setViewportView(FileTree);

        TabbedPane.addTab("List of Files", jScrollPane4);

        UserActionPanel.setBackground(new java.awt.Color(204, 204, 204));
        UserActionPanel.setLayout(new java.awt.GridLayout(1, 0));

        startButton.setFont(new java.awt.Font("Verdana", 1, 10)); // NOI18N
        startButton.setText("Start Action");
        startButton.setAlignmentX(0.5F);
        startButton.setMargin(new java.awt.Insets(2, 6, 2, 6));
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });
        UserActionPanel.add(startButton);
        startButton.getAccessibleContext().setAccessibleDescription("");

        resumeButton.setFont(new java.awt.Font("Verdana", 1, 10)); // NOI18N
        resumeButton.setText("Resume Action");
        resumeButton.setAlignmentX(0.5F);
        resumeButton.setMargin(new java.awt.Insets(2, 6, 2, 6));
        resumeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resumeButtonActionPerformed(evt);
            }
        });
        UserActionPanel.add(resumeButton);
        resumeButton.getAccessibleContext().setAccessibleDescription("");

        pauseButton.setFont(new java.awt.Font("Verdana", 1, 10)); // NOI18N
        pauseButton.setText("Pause Action");
        pauseButton.setAlignmentX(0.5F);
        pauseButton.setMargin(new java.awt.Insets(2, 6, 2, 6));
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });
        UserActionPanel.add(pauseButton);
        pauseButton.getAccessibleContext().setAccessibleDescription("");

        cancelButton.setFont(new java.awt.Font("Verdana", 1, 10)); // NOI18N
        cancelButton.setText("Cancel Action");
        cancelButton.setAlignmentX(0.5F);
        cancelButton.setMargin(new java.awt.Insets(2, 6, 2, 6));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        UserActionPanel.add(cancelButton);
        cancelButton.getAccessibleContext().setAccessibleDescription("");

        SubmitButton.setFont(new java.awt.Font("Verdana", 1, 10)); // NOI18N
        SubmitButton.setText("Action Button 1");
        SubmitButton.setAlignmentX(0.5F);
        SubmitButton.setEnabled(false);
        SubmitButton.setMargin(new java.awt.Insets(2, 6, 2, 6));
        UserActionPanel.add(SubmitButton);
        SubmitButton.getAccessibleContext().setAccessibleDescription("");

        QuitButton.setFont(new java.awt.Font("Verdana", 1, 10)); // NOI18N
        QuitButton.setText("Action Button 2");
        QuitButton.setAlignmentX(0.5F);
        QuitButton.setEnabled(false);
        QuitButton.setMargin(new java.awt.Insets(2, 6, 2, 6));
        UserActionPanel.add(QuitButton);
        QuitButton.getAccessibleContext().setAccessibleDescription("");

        MainPanel.setBackground(new java.awt.Color(229, 229, 229));
        MainPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true)));

        javax.swing.GroupLayout MainPanelLayout = new javax.swing.GroupLayout(MainPanel);
        MainPanel.setLayout(MainPanelLayout);
        MainPanelLayout.setHorizontalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        MainPanelLayout.setVerticalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 416, Short.MAX_VALUE)
        );

        ProgressBar.setMaximum(0);
        ProgressBar.setString("");
        ProgressBar.setStringPainted(true);
        ProgressBar.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ProgressBarStateChanged(evt);
            }
        });

        SystemMenu.setText("System");
        SystemMenu.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
                SystemMenuMenuCanceled(evt);
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
            }
        });

        changeRepositoryFolderMenuItem.setText("Change Repository Folder");
        changeRepositoryFolderMenuItem.setActionCommand("askForFolder");
        changeRepositoryFolderMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeRepositoryFolderMenuItemActionPerformed(evt);
            }
        });
        SystemMenu.add(changeRepositoryFolderMenuItem);
        SystemMenu.add(jSeparator1);

        openHelpDocumentMenuIte0.setText("Open Help Document");
        SystemMenu.add(openHelpDocumentMenuIte0);
        SystemMenu.add(jSeparator2);

        cleanDataFilesMenuItem.setText("Clean Data Files");
        cleanDataFilesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleanDataFilesMenuItemActionPerformed(evt);
            }
        });
        SystemMenu.add(cleanDataFilesMenuItem);
        ProgressBar.setString("0%");

        SystemMenu.add(jSeparator5);

        safelyExitSystem.setText("Safely Exit System");
        safelyExitSystem.setActionCommand("Exit");
        safelyExitSystem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                safelyExitSystemActionPerformed(evt);
            }
        });
        SystemMenu.add(safelyExitSystem);

        MenuBar.add(SystemMenu);

        TagsMenu.setText("Tags");

        automaticallyTagFilesMenuItem.setText("Automatically Tag Files");
        TagsMenu.add(automaticallyTagFilesMenuItem);

        manuallyTagFilesMenuItem.setText("Manually Tag Files");
        manuallyTagFilesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manuallyTagFilesMenuItemActionPerformed(evt);
            }
        });
        TagsMenu.add(manuallyTagFilesMenuItem);
        TagsMenu.add(jSeparator4);

        associateFilesWithTagMenuItem.setText("Modify Files Associated with a Tag");
        TagsMenu.add(associateFilesWithTagMenuItem);

        associateTagsWithFilesMenuItem.setText("Modify Tags Associated with a File");
        TagsMenu.add(associateTagsWithFilesMenuItem);

        MenuBar.add(TagsMenu);

        SearchesMenu.setText("Searches");

        initiateSearchQueryMenuItem.setText("Initiate Search Query");
        initiateSearchQueryMenuItem.setActionCommand("initiateSearchQuery");
        SearchesMenu.add(initiateSearchQueryMenuItem);

        MenuBar.add(SearchesMenu);

        IndexingMenu.setText("Indexing");

        indexAllFilesMenuItem.setText("Index All Files");
        indexAllFilesMenuItem.setActionCommand("IndexAll");
        indexAllFilesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                indexAllFilesMenuItemActionPerformed(evt);
            }
        });
        IndexingMenu.add(indexAllFilesMenuItem);

        indexNewFilesMenuItem.setText("Index New Files");
        indexNewFilesMenuItem.setActionCommand("IndexNew");
        indexNewFilesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                indexNewFilesMenuItemActionPerformed(evt);
            }
        });
        IndexingMenu.add(indexNewFilesMenuItem);
        IndexingMenu.add(jSeparator6);

        addSpecificFilesToSystemMenuItem.setText("Add Specific Files to System");
        IndexingMenu.add(addSpecificFilesToSystemMenuItem);

        MenuBar.add(IndexingMenu);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(statusMessageScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 595, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(UserActionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 649, Short.MAX_VALUE)
                            .addComponent(ProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(TabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 1256, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(TabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(statusMessageScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(UserActionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(7, 7, 7))
        );

        getAccessibleContext().setAccessibleName("Research Knowledge Manager - SE Senior Design");

        setBounds(0, 0, 1296, 700);
    }// </editor-fold>//GEN-END:initComponents

    private void SystemMenuMenuCanceled(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_SystemMenuMenuCanceled
        // TODO add your handling code here:
    }//GEN-LAST:event_SystemMenuMenuCanceled

    private void changeRepositoryFolderMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeRepositoryFolderMenuItemActionPerformed
        try {
            rm.askForRepository(new File(rm.dataDirectory.getAbsoluteFile() + "\\" + rm.repoFileName));
        } catch (IOException ex) {
            System.err.println("I/O Error!");
        }
    }//GEN-LAST:event_changeRepositoryFolderMenuItemActionPerformed

    private void manuallyTagFilesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manuallyTagFilesMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_manuallyTagFilesMenuItemActionPerformed

    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
        if (executingThread != null) {

            synchronized (executingThread) {
                if (rm.actionStatus == ResearchKnowledgeManager.activeState.ACTIVE) {
                    rm.setState(ResearchKnowledgeManager.activeState.PAUSED);
                    newMessage("Pausing current action. Click \"Resume Action\" to resume the action");
                }
            }
        }
    }//GEN-LAST:event_pauseButtonActionPerformed

    private void cleanDataFilesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanDataFilesMenuItemActionPerformed
        // TODO add your handling code here:
        exitNoWrite = true;

        ConfirmationDialog confirm = new ConfirmationDialog(this, true);
        confirm.setVisible(true);
        if (confirm.getReturnStatus() == 1) {
            this.rm.clean();
            ProgressBar.setMaximum(0);

            // Series of actions disabling menu items to prevent unexpected exceptions from user input
            this.indexAllFilesMenuItem.setEnabled(false);
            this.indexNewFilesMenuItem.setEnabled(false);
            this.addSpecificFilesToSystemMenuItem.setEnabled(false);
            this.associateFilesWithTagMenuItem.setEnabled(false);
            this.associateTagsWithFilesMenuItem.setEnabled(false);
            this.changeRepositoryFolderMenuItem.setEnabled(false);
            this.automaticallyTagFilesMenuItem.setEnabled(false);
            this.manuallyTagFilesMenuItem.setEnabled(false);
            this.initiateSearchQueryMenuItem.setEnabled(false);
        }

    }//GEN-LAST:event_cleanDataFilesMenuItemActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        if (!exitNoWrite) {
            this.rm.exit();
        }
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    private void safelyExitSystemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_safelyExitSystemActionPerformed
        this.formWindowClosing(null);
    }//GEN-LAST:event_safelyExitSystemActionPerformed

    private void resumeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resumeButtonActionPerformed

        if (executingThread != null) {
            synchronized (executingThread) {
                if (rm.actionStatus == ResearchKnowledgeManager.activeState.PAUSED) {
                    executingThread.notifyAll();
                    rm.setState(ResearchKnowledgeManager.activeState.ACTIVE);
                    newMessage("Resuming current action...");
                }
            }
        }
    }//GEN-LAST:event_resumeButtonActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        if (executingThread != null && !executingThread.isAlive()) {
            executingThread.start();
        } else {
            System.err.println("NULL EXCEPTION ERROR OCCURRING");
        }
    }//GEN-LAST:event_startButtonActionPerformed

    private void TagTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_TagTreeValueChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_TagTreeValueChanged

    private void ProgressBarStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ProgressBarStateChanged
        if (rm.ui.ProgressBar.getMaximum() > 0) {
            rm.ui.ProgressBar.setString(100 * rm.ui.ProgressBar.getValue() / rm.ui.ProgressBar.getMaximum() + "%");
        } else {
            rm.ui.ProgressBar.setString("0%");
        }

    }//GEN-LAST:event_ProgressBarStateChanged

    private void indexAllFilesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_indexAllFilesMenuItemActionPerformed
        rm.setState(ResearchKnowledgeManager.activeState.READY);
        newMessage("Ready to index all files. Click \"Start Action\" to begin");

        this.executingThread = new Thread(() -> {

            //Thread initializations
            ProgressBar.setMaximum(0);
            rm.setState(ResearchKnowledgeManager.activeState.ACTIVE);
            newMessage("Preparing some calculations, please wait");
            ProgressBar.setMaximum(rm.fileIndexer.computeMaxFolderChild(rm.repositoryFolder));

            newMessage("Calculations completed! File indexing will now begin. Please wait for confirmation message...");
            rm.fileIndexer.indexAllReturn = rm.fileIndexer.indexFilesAll(rm.repositoryFolder, false, rm);

            newMessage(rm.lineSeparator);
            rm.fileIndexer.saveIndexAll(rm.dataDirectory);

            // Thread cleanup
            newMessage("Finished processing all files!");
            rm.setState(ResearchKnowledgeManager.activeState.INACTIVE);
            executingThread = null;
        });

    }//GEN-LAST:event_indexAllFilesMenuItemActionPerformed

    private void indexNewFilesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_indexNewFilesMenuItemActionPerformed
        rm.setState(ResearchKnowledgeManager.activeState.READY);
        newMessage("Ready to index all files. Click \"Start Action\" to begin");

        executingThread = new Thread(() -> {

            //Thread initializations
            ProgressBar.setMaximum(0);
            rm.setState(ResearchKnowledgeManager.activeState.ACTIVE);
            newMessage("Preparing some calculations, please wait...");
            ProgressBar.setMaximum(rm.fileIndexer.computeMaxFolderChild(rm.repositoryFolder));
            newMessage("Calculations completed! File indexing will now begin. Please wait for confirmation message...");

            rm.fileIndexer.indexNewReturn = rm.fileIndexer.indexFilesNew(rm.repositoryFolder, false, rm);
            newMessage(rm.lineSeparator);

            rm.fileIndexer.saveIndexNew(rm.dataDirectory);

            // Thread cleanup
            newMessage("Finished processing new files!");
            rm.setState(ResearchKnowledgeManager.activeState.INACTIVE);
            executingThread = null;
        });

    }//GEN-LAST:event_indexNewFilesMenuItemActionPerformed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus

    }//GEN-LAST:event_formWindowGainedFocus

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed

        newMessage("Current action cancelled!");
        newMessage(rm.lineSeparator);
        ProgressBar.setString("0%");
        ProgressBar.setValue(0);
        ProgressBar.setMaximum(0);

        switch (rm.actionStatus) {
            case READY: {
                // May need to find better alternative to stop() method since the method is deprecated...
                executingThread.stop();
                executingThread = null;
                rm.setState(ResearchKnowledgeManager.activeState.INACTIVE);
                break;
            }
            case ACTIVE: {
                // May need to find better alternative to stop() method since the method is deprecated...
                executingThread.stop();
                executingThread = null;
                rm.setState(ResearchKnowledgeManager.activeState.INACTIVE);
                break;
            }
            case PAUSED: {
                // May need to find better alternative to stop() method since the method is deprecated...
                executingThread.stop();
                executingThread = null;
                rm.setState(ResearchKnowledgeManager.activeState.INACTIVE);
                break;
            }

        }
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void statusListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_statusListKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_DELETE) {
            statusMessages.removeAllElements();
            newMessage("Message log cleared!");
            newMessage(rm.lineSeparator);
        } else if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_BACK_SPACE && statusMessages.getSize() > 0) {
            statusMessages.remove(statusMessages.getSize() - 1);
        }
    }//GEN-LAST:event_statusListKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JTree FileExplorerTree;
    private javax.swing.JTree FileTree;
    private javax.swing.JMenu IndexingMenu;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JMenuBar MenuBar;
    protected javax.swing.JProgressBar ProgressBar;
    private javax.swing.JButton QuitButton;
    private javax.swing.JMenu SearchesMenu;
    private javax.swing.JButton SubmitButton;
    private javax.swing.JMenu SystemMenu;
    private javax.swing.JTabbedPane TabbedPane;
    private javax.swing.JTree TagTree;
    private javax.swing.JMenu TagsMenu;
    private javax.swing.JPanel UserActionPanel;
    private javax.swing.JMenuItem addSpecificFilesToSystemMenuItem;
    private javax.swing.JMenuItem associateFilesWithTagMenuItem;
    private javax.swing.JMenuItem associateTagsWithFilesMenuItem;
    private javax.swing.JMenuItem automaticallyTagFilesMenuItem;
    private javax.swing.JButton cancelButton;
    private javax.swing.JMenuItem changeRepositoryFolderMenuItem;
    private javax.swing.JMenuItem cleanDataFilesMenuItem;
    private javax.swing.JMenuItem indexAllFilesMenuItem;
    private javax.swing.JMenuItem indexNewFilesMenuItem;
    private javax.swing.JMenuItem initiateSearchQueryMenuItem;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JMenuItem manuallyTagFilesMenuItem;
    private javax.swing.JMenuItem openHelpDocumentMenuIte0;
    private javax.swing.JButton pauseButton;
    private javax.swing.JButton resumeButton;
    private javax.swing.JMenuItem safelyExitSystem;
    private javax.swing.JButton startButton;
    private javax.swing.JList statusList;
    private javax.swing.JScrollPane statusMessageScrollPane;
    // End of variables declaration//GEN-END:variables

}
